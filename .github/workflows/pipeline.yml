name: Libdbc Pipeline

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  linux-builds:
    name: ${{matrix.cxx}}, C++${{matrix.std}}, ${{matrix.build_type}}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cxx:
          - g++-13
          - clang++-16
        build_type: [Debug, Release]
        std: [11]
        include:
          - cxx: g++-13
            cc: gcc-13
          - cxx: clang++-16
            cc: clang-16
            llvm_version: 16

    steps:
      - uses: actions/checkout@v4

      - name: Install clang
        if: ${{ matrix.llvm_version }}
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{ matrix.llvm_version }}

      - name: Prepare environment
        run: |
          sudo apt-get update
          sudo apt-get install -y locales

          sudo locale-gen de_DE.UTF-8

      - name: Configure build
        working-directory: ${{runner.workspace}}
        env:
          CC: ${{matrix.cc}}
          CXX: ${{matrix.cxx}}
        run: |
          cmake -Bbuild -H$GITHUB_WORKSPACE \
                -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
                -DCMAKE_CXX_STANDARD=${{matrix.std}} \
                -DCMAKE_CXX_STANDARD_REQUIRED=ON \
                -DCMAKE_CXX_EXTENSIONS=ON \
                -DDBC_TEST_LOCALE_INDEPENDENCE=ON

      - name: Build tests + lib
        working-directory: ${{runner.workspace}}
        run: cmake --build build

      - name: Run tests
        env:
            CTEST_OUTPUT_ON_FAILURE: 1
        working-directory: ${{runner.workspace}}
        run: ctest --output-on-failure --test-dir build -j `nproc`

  windows-build:
    name: ${{matrix.os}}, ${{matrix.std}}, ${{matrix.build_type}}, ${{matrix.platform}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-2019, windows-2022]
        platform: [Win32, x64]
        build_type: [Debug, Release]
        std: [11]

    steps:
      - uses: actions/checkout@v4

      - name: Configure build
        working-directory: ${{runner.workspace}}
        run: |
          cmake -B ${{runner.workspace}}/build            `
                -S $Env:GITHUB_WORKSPACE                  `
                -H $GITHUB_WORKSPACE                      `
                -A ${{matrix.platform}}                   `
                -DCMAKE_BUILD_TYPE=${{matrix.build_type}} `
                -DCMAKE_CXX_STANDARD=${{matrix.std}}      `
                -DCMAKE_CXX_STANDARD_REQUIRED=ON          `
                -DCMAKE_CXX_EXTENSIONS=ON                 `
                -DDBC_TEST_LOCALE_INDEPENDENCE=ON

      - name: Build tests + lib
        working-directory: ${{runner.workspace}}
        run: cmake --build build --config ${{matrix.build_type}} --parallel %NUMBER_OF_PROCESSORS%
        shell: cmd

      - name: Run tests
        env:
            CTEST_OUTPUT_ON_FAILURE: 1
        working-directory: ${{runner.workspace}}
        run: ctest --output-on-failure --test-dir build -j %NUMBER_OF_PROCESSORS%
        shell: cmd

  format-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Test format with clang format
      run: ./scripts/fmt.sh

